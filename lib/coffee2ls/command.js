// Generated by CoffeeScript 2.0.0-dev
var $0, $0, additionalArgs, additionalArgs, additionalArgs, arg, args, coffee2ls, concat, foldl, formatOptions, fs, humanReadable, input, input, inspect, leftColumnWidth, longOptionArguments, longParameterArguments, match, match, match, maxWidth, numberLines, o, o, o, optionArguments, optionMap, optionRows, options, opts, opts, parameterArguments, parameterRows, path, pkg, positionalArgs, positionalArgs, Preprocessor, processInput, reLongOption, reLongParameter, reShortOptions, reShortOptionsShortParameter, reShortParameter, row, rows, shortOptionArguments, shortParameterArguments, wrap;
fs = require('fs');
path = require('path');
cache$ = require('./functional-helpers');
concat = cache$.concat;
foldl = cache$.foldl;
cache$1 = require('./helpers');
numberLines = cache$1.numberLines;
humanReadable = cache$1.humanReadable;
Preprocessor = require('./preprocessor').Preprocessor;
coffee2ls = require('./module');
inspect = function (o) {
  return require('util').inspect(o, false, 9e9, true);
};
args = process.argv.slice(1 + (process.argv[0] === 'node'));
additionalArgs = [];
if (in$('--', args))
  additionalArgs = args.splice(args.indexOf('--'), 9e9).slice(1);
options = {};
optionMap = {};
optionArguments = [
  [
    [
      'js',
      'j'
    ],
    false,
    'input is JavaScript (not CoffeeScript)'
  ],
  [
    ['debug'],
    false,
    'output intermediate representations on stderr for debug'
  ],
  [
    [
      'version',
      'v'
    ],
    false,
    'display the version number'
  ],
  [
    [
      'help',
      'h'
    ],
    false,
    'display this help message'
  ]
];
parameterArguments = [
  [
    [
      'cli',
      'c'
    ],
    'INPUT',
    'pass a string from the command line as input'
  ],
  [
    [
      'input',
      'i'
    ],
    'FILE',
    'file to be used as input instead of STDIN'
  ],
  [
    [
      'output',
      'o'
    ],
    'FILE',
    'file to be used as output instead of STDIN'
  ],
  [
    [
      'watch',
      'w'
    ],
    'FILE',
    'watch the given file/directory for changes'
  ]
];
shortOptionArguments = [];
longOptionArguments = [];
for (var i$ = 0, length$ = optionArguments.length; i$ < length$; ++i$) {
  opts = optionArguments[i$];
  options[opts[0][0]] = opts[1];
  for (var i$1 = 0, length$1 = opts[0].length; i$1 < length$1; ++i$1) {
    o = opts[0][i$1];
    optionMap[o] = opts[0][0];
    if (o.length === 1) {
      shortOptionArguments.push(o);
    } else if (o.length > 1) {
      longOptionArguments.push(o);
    }
  }
}
shortParameterArguments = [];
longParameterArguments = [];
for (var i$2 = 0, length$2 = parameterArguments.length; i$2 < length$2; ++i$2) {
  opts = parameterArguments[i$2];
  for (var i$3 = 0, length$3 = opts[0].length; i$3 < length$3; ++i$3) {
    o = opts[0][i$3];
    optionMap[o] = opts[0][0];
    if (o.length === 1) {
      shortParameterArguments.push(o);
    } else if (o.length > 1) {
      longParameterArguments.push(o);
    }
  }
}
reShortOptions = new RegExp('^-(' + shortOptionArguments.join('|') + ')+$');
reLongOption = new RegExp('^--(no-)?(' + longOptionArguments.join('|') + ')$');
reShortParameter = new RegExp('^-(' + shortParameterArguments.join('|') + ')$');
reLongParameter = new RegExp('^--(' + longParameterArguments.join('|') + ')$');
reShortOptionsShortParameter = new RegExp('^-(' + shortOptionArguments.join('|') + ')+(' + shortParameterArguments.join('|') + ')$');
positionalArgs = [];
while (args.length) {
  arg = args.shift();
  if (reShortOptionsShortParameter.exec(arg)) {
    args.unshift('-' + arg.slice(1, -1), '-' + arg.slice(-1));
  } else if (reShortOptions.exec(arg)) {
    for (var cache$2 = arg.slice(1).split(''), i$4 = 0, length$4 = cache$2.length; i$4 < length$4; ++i$4) {
      o = cache$2[i$4];
      options[optionMap[o]] = true;
    }
  } else if (match = reLongOption.exec(arg)) {
    options[optionMap[match[2]]] = null != match[1] ? false : true;
  } else if (match = (cache$3 = reShortParameter.exec(arg), null != cache$3 ? cache$3 : reLongParameter.exec(arg))) {
    options[optionMap[match[1]]] = args.shift();
  } else if (match = /^(-.|--.*)$/.exec(arg)) {
    console.error("Unrecognised option '" + match[0].replace(/'/g, "\\'") + "'");
    process.exit(1);
  } else {
    positionalArgs.push(arg);
  }
}
positionalArgs = positionalArgs.concat(additionalArgs);
if (positionalArgs.length) {
  options.input = positionalArgs.shift();
  additionalArgs = positionalArgs;
}
if (1 < (null != options.input) + (null != options.watch) + (null != options.cli)) {
  console.error('Error: At most one of --input (-i), --watch (-w), or --cli may be used.');
  process.exit(1);
}
if (null != options.require && !options['eval']) {
  console.error('Error: --require (-I) depends on --eval (-e)');
  process.exit(1);
}
if (null != options.input && fs.statSync(options.input).isDirectory() && (!(null != options.output) || (null != (cache$4 = fs.statSync(options.output)) ? cache$4.isFile() : void 0)))
  console.error('Error: when --input is a directory, --output must be provided, and --output must not reference a file');
if (options.help) {
  $0 = process.argv[0] === 'node' ? process.argv[1] : process.argv[0];
  $0 = path.basename($0);
  maxWidth = 85;
  wrap = function (lhsWidth, input) {
    var pad, rhsWidth, rows;
    rhsWidth = maxWidth - lhsWidth;
    pad = Array(lhsWidth + 4 + 1).join(' ');
    rows = function (accum$) {
      var row;
      while (input.length) {
        row = input.slice(0, rhsWidth);
        input = input.slice(rhsWidth);
        accum$.push(row);
      }
      return accum$;
    }.call(this, []);
    return rows.join('\n' + pad);
  };
  formatOptions = function (opts) {
    opts = function (accum$) {
      var opt;
      for (var i$5 = 0, length$5 = opts.length; i$5 < length$5; ++i$5) {
        opt = opts[i$5];
        if (!opt.length)
          continue;
        accum$.push(opt.length === 1 ? '-' + opt : '--' + opt);
      }
      return accum$;
    }.call(this, []);
    opts.sort(function (a, b) {
      return a.length - b.length;
    });
    return opts.join(', ');
  };
  console.log('\n    Usage:\n      TODO: usage\n  ');
  optionRows = function (accum$) {
    var opt;
    for (var i$5 = 0, length$5 = optionArguments.length; i$5 < length$5; ++i$5) {
      opt = optionArguments[i$5];
      accum$.push([
        formatOptions(opt[0]),
        opt[2]
      ]);
    }
    return accum$;
  }.call(this, []);
  parameterRows = function (accum$) {
    var opt;
    for (var i$5 = 0, length$5 = parameterArguments.length; i$5 < length$5; ++i$5) {
      opt = parameterArguments[i$5];
      accum$.push([
        '' + formatOptions(opt[0]) + ' ' + opt[1],
        opt[2]
      ]);
    }
    return accum$;
  }.call(this, []);
  leftColumnWidth = foldl(0, [].slice.call(optionRows).concat([].slice.call(parameterRows)), function (memo, opt) {
    return Math.max(memo, opt[0].length);
  });
  rows = [].slice.call(optionRows).concat([].slice.call(parameterRows));
  rows.sort(function (a, b) {
    a = a[0];
    b = b[0];
    if (a.slice(0, +1 + 1) === '--' && b.slice(0, +1 + 1) !== '--')
      return 1;
    if (b.slice(0, +1 + 1) === '--' && a.slice(0, +1 + 1) !== '--')
      return -1;
    if (a.toLowerCase() < b.toLowerCase()) {
      return -1;
    } else {
      return 1;
    }
  });
  for (var i$5 = 0, length$5 = rows.length; i$5 < length$5; ++i$5) {
    row = rows[i$5];
    console.log('  ' + row[0] + Array(leftColumnWidth - row[0].length + 1).join(' ') + '  ' + wrap(leftColumnWidth, row[1]));
  }
  console.log('\n    Unless instructed otherwise (--{input,watch,cli}), `' + $0 + '` will operate on stdin/stdout.\n  ');
} else if (options.version) {
  pkg = require('./../../package.json');
  console.log('coffee2ls version ' + pkg.version);
} else if (options.repl) {
  console.error('TODO: REPL');
  process.exit(1);
} else {
  input = '';
  processInput = function (err) {
    var e, result;
    if (null != err)
      throw err;
    result = null;
    input = input.toString();
    if (65279 === input.charCodeAt(0))
      input = input.slice(1);
    if (options.js)
      try {
        input = coffee2ls.js2coffee(input);
      } catch (e$) {
        e = e$;
        console.log(e.message);
        process.exit(1);
      }
    if (options.debug)
      try {
        console.log('### PREPROCESSED CS ###');
        console.log(numberLines(humanReadable(Preprocessor.processSync(input))));
      } catch (e$1) {
      }
    try {
      result = coffee2ls.parse(input);
    } catch (e$2) {
      e = e$2;
      console.error(e.message);
      process.exit(1);
    }
    if (options.debug && null != result) {
      console.error('### PARSED CS-AST ###');
      console.error(inspect(result.toJSON()));
    }
    try {
      result = coffee2ls.compile(result);
    } catch (e$3) {
      e = e$3;
      console.error(e.stack || e.message);
      process.exit(1);
    }
    if (null != result) {
      console.log(result);
      return process.exit(0);
    } else {
      return process.exit(1);
    }
  };
  if (null != options.input) {
    fs.readFile(options.input, function (err, contents) {
      if (null != err)
        throw err;
      input = contents;
      return processInput();
    });
  } else if (null != options.watch) {
    options.watch;
  } else if (null != options.cli) {
    input = options.cli;
    processInput();
  } else {
    process.stdin.on('data', function (data) {
      return input += data;
    });
    process.stdin.on('end', processInput);
    process.stdin.setEncoding('utf8');
    process.stdin.resume();
  }
}
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
