// Generated by CoffeeScript 2.0.0-dev
var codegen, coffee2ls, coffee2ls, formatParserError, fs, js2coffee, LiveScript, Nodes, Parser, path, pkg, Preprocessor;
fs = require('fs');
path = require('path');
formatParserError = require('./helpers').formatParserError;
Nodes = require('./nodes');
Preprocessor = require('./preprocessor').Preprocessor;
Parser = require('./parser');
codegen = require('coffee2ls-codegen');
LiveScript = require('LiveScript');
coffee2ls = null;
pkg = require(path.join(__dirname, '..', '..', 'package.json'));
module.exports = {
  Parser: Parser,
  Preprocessor: Preprocessor,
  Nodes: Nodes,
  VERSION: pkg.version,
  parse: function (coffee, options) {
    var e, parsed, preprocessed;
    if (null == options)
      options = {};
    try {
      preprocessed = Preprocessor.processSync(coffee);
      return parsed = Parser.parse(preprocessed);
    } catch (e$) {
      e = e$;
      if (!options.suppress)
        console.log('Error parsing CoffeeScript');
      if (!(e instanceof Parser.SyntaxError))
        throw e;
      throw new Error(formatParserError(preprocessed, e));
    }
  },
  js2coffee: function (js, options) {
    var e;
    if (null == options)
      options = {js: {}};
    try {
      return js2coffee.build(js, options.js);
    } catch (e$) {
      e = e$;
      if (!options.suppress) {
        console.log('Error with JavaScript -> CoffeeScript compilation');
        console.log(js);
      }
      throw e;
    }
  },
  ls: function (csAst, options) {
    var e;
    if (null == options)
      options = {};
    try {
      return codegen.generate(csAst);
    } catch (e$) {
      e = e$;
      if (!options.suppress) {
        console.log('Error with CoffeeScript AST -> LiveScript compilation');
        console.log(csAst);
      }
      throw e;
    }
  },
  compile: function (csAst, options) {
    if (null == options)
      options = {};
    return this.ls(csAst, options);
  },
  ls2js: function (ls, options) {
    var e;
    if (null == options)
      options = {ls: {bare: true}};
    try {
      return LiveScript.compile(ls, options.ls);
    } catch (e$) {
      e = e$;
      if (!options.suppress) {
        console.log('Error with LiveScript -> JavaScript compilation');
        console.log(ls);
      }
      throw e;
    }
  },
  coffee2js: function (coffee, options) {
    if (null == options)
      options = {};
    return this.ls2js(this.ls(this.parse(coffee, options), options), options);
  },
  run: function (coffee, options) {
    var e;
    try {
      return eval(this.coffee2js(coffee, options));
    } catch (e$) {
      e = e$;
      if (!options.suppress) {
        console.log('Error attempting to eval JavaScript compiled from CoffeeScript');
        console.log(coffee);
      }
      throw e;
    }
  }
};
coffee2ls = module.exports.coffee2ls = module.exports;
require.extensions['.coffee'] = function (module, filename) {
  var input;
  input = fs.readFileSync(filename, 'utf8');
  return module._compile(coffee2ls.coffee2js(input), filename);
};
